// Code generated by mockery. DO NOT EDIT.

package service

import (
	model "github.com/spf13/myapp/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetAvailableLanguages provides a mock function with given fields:
func (_m *MockService) GetAvailableLanguages() []model.Language {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableLanguages")
	}

	var r0 []model.Language
	if rf, ok := ret.Get(0).(func() []model.Language); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Language)
		}
	}

	return r0
}

// MockService_GetAvailableLanguages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableLanguages'
type MockService_GetAvailableLanguages_Call struct {
	*mock.Call
}

// GetAvailableLanguages is a helper method to define mock.On call
func (_e *MockService_Expecter) GetAvailableLanguages() *MockService_GetAvailableLanguages_Call {
	return &MockService_GetAvailableLanguages_Call{Call: _e.mock.On("GetAvailableLanguages")}
}

func (_c *MockService_GetAvailableLanguages_Call) Run(run func()) *MockService_GetAvailableLanguages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetAvailableLanguages_Call) Return(_a0 []model.Language) *MockService_GetAvailableLanguages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GetAvailableLanguages_Call) RunAndReturn(run func() []model.Language) *MockService_GetAvailableLanguages_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplates provides a mock function with given fields:
func (_m *MockService) GetTemplates() []model.Template {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTemplates")
	}

	var r0 []model.Template
	if rf, ok := ret.Get(0).(func() []model.Template); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Template)
		}
	}

	return r0
}

// MockService_GetTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplates'
type MockService_GetTemplates_Call struct {
	*mock.Call
}

// GetTemplates is a helper method to define mock.On call
func (_e *MockService_Expecter) GetTemplates() *MockService_GetTemplates_Call {
	return &MockService_GetTemplates_Call{Call: _e.mock.On("GetTemplates")}
}

func (_c *MockService_GetTemplates_Call) Run(run func()) *MockService_GetTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetTemplates_Call) Return(_a0 []model.Template) *MockService_GetTemplates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GetTemplates_Call) RunAndReturn(run func() []model.Template) *MockService_GetTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery. DO NOT EDIT.

package services

import mock "github.com/stretchr/testify/mock"

// MockTreeService is an autogenerated mock type for the TreeService type
type MockTreeService struct {
	mock.Mock
}

type MockTreeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTreeService) EXPECT() *MockTreeService_Expecter {
	return &MockTreeService_Expecter{mock: &_m.Mock}
}

// WalkDir provides a mock function with given fields: sourceDir, pattern, name
func (_m *MockTreeService) WalkDir(sourceDir string, pattern string, name string) error {
	ret := _m.Called(sourceDir, pattern, name)

	if len(ret) == 0 {
		panic("no return value specified for WalkDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(sourceDir, pattern, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTreeService_WalkDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalkDir'
type MockTreeService_WalkDir_Call struct {
	*mock.Call
}

// WalkDir is a helper method to define mock.On call
//   - sourceDir string
//   - pattern string
//   - name string
func (_e *MockTreeService_Expecter) WalkDir(sourceDir interface{}, pattern interface{}, name interface{}) *MockTreeService_WalkDir_Call {
	return &MockTreeService_WalkDir_Call{Call: _e.mock.On("WalkDir", sourceDir, pattern, name)}
}

func (_c *MockTreeService_WalkDir_Call) Run(run func(sourceDir string, pattern string, name string)) *MockTreeService_WalkDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTreeService_WalkDir_Call) Return(_a0 error) *MockTreeService_WalkDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTreeService_WalkDir_Call) RunAndReturn(run func(string, string, string) error) *MockTreeService_WalkDir_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTreeService creates a new instance of MockTreeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTreeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTreeService {
	mock := &MockTreeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery. DO NOT EDIT.

package services

import (
	model "github.com/arielsrv/sdk-cli/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockGitService is an autogenerated mock type for the GitService type
type MockGitService struct {
	mock.Mock
}

type MockGitService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitService) EXPECT() *MockGitService_Expecter {
	return &MockGitService_Expecter{mock: &_m.Mock}
}

// Clone provides a mock function with given fields: template
func (_m *MockGitService) Clone(template *model.Template) (*string, error) {
	ret := _m.Called(template)

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Template) (*string, error)); ok {
		return rf(template)
	}
	if rf, ok := ret.Get(0).(func(*model.Template) *string); ok {
		r0 = rf(template)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Template) error); ok {
		r1 = rf(template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitService_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type MockGitService_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - template *model.Template
func (_e *MockGitService_Expecter) Clone(template interface{}) *MockGitService_Clone_Call {
	return &MockGitService_Clone_Call{Call: _e.mock.On("Clone", template)}
}

func (_c *MockGitService_Clone_Call) Run(run func(template *model.Template)) *MockGitService_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Template))
	})
	return _c
}

func (_c *MockGitService_Clone_Call) Return(_a0 *string, _a1 error) *MockGitService_Clone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitService_Clone_Call) RunAndReturn(run func(*model.Template) (*string, error)) *MockGitService_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitService creates a new instance of MockGitService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitService {
	mock := &MockGitService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

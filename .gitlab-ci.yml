variables:
  GO_VERSION: '1.22.1'
  GONOSUMDB: gitlab.com
  GOPRIVATE: gitlab.com/iskaypetcom
  GITLAB_TOKEN: ${CICD_TOKEN}

image: docker.io/golang:${GO_VERSION}

default:
  tags:
    - kubernetes-executor

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/

before_script:
  - if [ -d "$HOME" ]; then echo "machine gitlab.com login master_token password $GITLAB_TOKEN" > "$HOME/.netrc"; fi

stages:
  - build
  - test

compile:
  stage: build
  extends: .go-cache
  script:
    - go mod tidy
    - go build -v ./...
  allow_failure: false
  only:
    - branches

unit:
  stage: test
  needs:
    - compile
  extends: .go-cache
  variables:
    output: report.xml
  script:
    - go install gotest.tools/gotestsum@latest
    - "$GOPATH"/bin/gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml
  allow_failure: false
  only:
    - branches

coverage:
  stage: test
  extends: .go-cache
  variables:
    output: coverage-report.out
    html: coverage-report.html
  script:
    - CGO_ENABLED=0 GOEXPERIMENT=nocoverageredesign go test ./... -coverprofile=coverage-report.out
    - go tool cover -html=coverage-report.out -o coverage-report.html
    - go tool cover -func=coverage-report.out
  artifacts:
    paths:
      - coverage-report.html
  coverage: "/\\(statements\\)\\s+\\d+.?\\d+%/"
  allow_failure: false
  only:
    - branches

coverage-report:
  stage: test
  extends: .go-cache
  script:
    - GOEXPERIMENT=nocoverageredesign go test ./... -coverprofile=coverage.txt -covermode count
    - go get github.com/boumenot/gocover-cobertura
    - go install github.com/boumenot/gocover-cobertura
    - "$GOPATH"/bin/gocover-cobertura <coverage.txt >coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    - branches

race:
  stage: test
  extends: .go-cache
  needs:
    - compile
  script:
    - go test -race ./...
  allow_failure: false
  only:
    - branches

lint:
  stage: test
  extends: .go-cache
  variables:
    output: gl-code-quality-report.json
  script:
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.57.1
    - "$GOPATH"/bin/golangci-lint run --issues-exit-code 0 --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: true
  only:
    - branches
